import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import folium
from folium.plugins import MarkerCluster
from geopy.distance import geodesic
from streamlit_folium import folium_static
from sqlalchemy import create_engine

# Configuration de la base de donn√©es
db_url = "postgresql://postgres:postgres.123@postgres:5432/db_immo"
engine = create_engine(db_url)

# Charger les donn√©es
@st.cache_data
def load_data():
    logements = pd.read_sql('SELECT * FROM "Logements"', engine)
    bornes_recharge = pd.read_sql('SELECT * FROM "bornes-recharge-publiques-a-jour"', engine)
    stationnements = pd.read_sql('SELECT * FROM "stationnements-h-2023-2024"', engine)
    return logements, bornes_recharge, stationnements

# Fonction pour afficher les visualisations des donn√©es
def display_visualizations(data):
    st.subheader("üìä Visualisations des Donn√©es")
    
    # Prix moyen au m¬≤
    st.subheader("üíµ Prix Moyen au m¬≤")
    data['Prix_m2'] = data['price'] / data['living_area']
    fig, ax = plt.subplots(figsize=(10, 6))
    sns.histplot(data['Prix_m2'], bins=30, kde=True, color='green', ax=ax)
    ax.set_title("Distribution des Prix Moyens au m¬≤")
    st.pyplot(fig)
    st.write("Ce graphique montre la r√©partition des prix moyens au m¬≤. Il utilise le prix total en dollars canadiens et la surface habitable (en m¬≤). Cela permet d'identifier les logements les plus co√ªteux au m¬≤.")

    # Appr√©ciation des valeurs immobili√®res par quartier
    st.subheader("üìà Appr√©ciation des Valeurs Immobili√®res par Quartier")
    price_by_quarter = data.groupby('postal_code')['price'].mean().reset_index()
    fig, ax = plt.subplots(figsize=(12, 6))
    sns.barplot(x="postal_code", y="price", data=price_by_quarter, palette="viridis", ax=ax)
    ax.set_title("Appr√©ciation des Valeurs Immobili√®res par Quartier")
    ax.set_xlabel("Code Postal")
    ax.set_ylabel("Prix Moyen (CAD)")
    ax.set_xticklabels(ax.get_xticklabels(), rotation=90)
    st.pyplot(fig)
    st.write("Ce graphique repr√©sente l'appr√©ciation des valeurs immobili√®res par quartier. Il montre le prix moyen des logements en fonction du code postal, ce qui permet d'identifier les quartiers les plus co√ªteux ou abordables.")

    # R√©partition des annonces par zone g√©ographique (FSA)
    st.subheader("üó∫ R√©partition des Annonces par Zone G√©ographique")
    fig, ax = plt.subplots(figsize=(10, 6))
    sns.countplot(x="fsa", data=data, palette="Set2", ax=ax)
    ax.set_title("R√©partition des Annonces par FSA")
    ax.set_xlabel("FSA (Forward Sortation Area)")
    ax.set_ylabel("Nombre de Logements")
    ax.set_xticklabels(ax.get_xticklabels(), rotation=90)
    st.pyplot(fig)
    st.write("Ce diagramme montre la r√©partition des annonces immobili√®res selon la zone g√©ographique (FSA). Il permet d'identifier les zones avec la plus grande concentration d'annonces.")

    # Indices de l'accessibilit√© √† la nature et aux espaces verts
    st.subheader("üå≥ Accessibilit√© aux Espaces Verts")
    data['Accessibilit√©_Nature'] = data['living_area'] / data['land_area'] * 100  # Exemple fictif
    fig, ax = plt.subplots(figsize=(10, 6))
    sns.histplot(data['Accessibilit√©_Nature'], bins=30, kde=True, color='lightblue', ax=ax)
    ax.set_title("Indice d'Accessibilit√© √† la Nature et aux Espaces Verts")
    st.pyplot(fig)
    st.write("Ce graphique montre un indice d'accessibilit√© √† la nature, calcul√© en fonction de la proportion de surface habitable par rapport √† la surface du terrain. Une plus grande proportion sugg√®re une meilleure utilisation de l'espace terrain pour des logements spacieux.")

    # Indice de la demande immobili√®re par zone g√©ographique
    st.subheader("üìç Demande Immobili√®re par Zone G√©ographique")
    demand_by_zone = data['postal_code'].value_counts().reset_index()
    demand_by_zone.columns = ['postal_code', 'Nombre de Logements']
    fig, ax = plt.subplots(figsize=(10, 6))
    sns.barplot(x="postal_code", y="Nombre de Logements", data=demand_by_zone, palette="rocket", ax=ax)
    ax.set_title("Demande Immobili√®re par Zone G√©ographique")
    ax.set_xlabel("Code Postal")
    ax.set_ylabel("Nombre de Logements")
    ax.set_xticklabels(ax.get_xticklabels(), rotation=90)
    st.pyplot(fig)
    st.write("Ce graphique montre la demande immobili√®re par zone g√©ographique. Il repr√©sente le nombre de logements par code postal, permettant de visualiser les zones avec une forte demande de logements.")

# Fonction principale pour la page de visualisation
def main():
    # Charger les donn√©es
    data, bornes_recharge, stationnements = load_data()

    # Afficher les visualisations
    display_visualizations(data)

    # Afficher la carte avec services √† proximit√©
    display_map_with_services(data, bornes_recharge, stationnements)

# Fonction pour calculer la distance entre deux points
def calculate_distance(lat1, lon1, lat2, lon2):
    return geodesic((lat1, lon1), (lat2, lon2)).km

# Fonction pour trouver les services √† proximit√©
def find_nearby_services(logement_lat, logement_lon, distance_km, bornes_recharge, stationnements):
    nearby_services = []

    # Chercher les bornes de recharge √† proximit√©
    for _, row in bornes_recharge.iterrows():
        service_distance = calculate_distance(logement_lat, logement_lon, row["Latitude"], row["Longitude"])
        if service_distance <= distance_km:
            nearby_services.append({"type": "Borne de recharge", "lat": row["Latitude"], "lon": row["Longitude"], "distance": service_distance})

    # Chercher les stationnements √† proximit√©
    for _, row in stationnements.iterrows():
        service_distance = calculate_distance(logement_lat, logement_lon, row["Latitude"], row["Longitude"])
        if service_distance <= distance_km:
            nearby_services.append({"type": "Stationnement", "lat": row["Latitude"], "lon": row["Longitude"], "distance": service_distance})

    return nearby_services

# Fonction pour afficher la carte avec les services
def display_map_with_services(data, bornes_recharge, stationnements):
    st.subheader("üó∫ Carte des Annonces Immobili√®res et Services √† Proximit√©")
    logement_options = data[['address', 'latitude', 'longitude']].dropna().reset_index(drop=True)

    # Liste d√©roulante pour choisir un logement
    selected_logement = st.selectbox("Choisissez un logement:", logement_options['address'])
    
    # R√©cup√©rer les coordonn√©es du logement s√©lectionn√©
    logement_coord = logement_options[logement_options['address'] == selected_logement].iloc[0]
    logement_lat = logement_coord['latitude']
    logement_lon = logement_coord['longitude']

    # S√©lectionner la distance √† parcourir pour trouver des services
    distance_km = st.slider("Choisir la distance (en km) pour trouver des services:", min_value=1, max_value=50, value=5)

    # Carte de l'annonce s√©lectionn√©e
    m = folium.Map(location=[logement_lat, logement_lon], zoom_start=14)
    folium.Marker([logement_lat, logement_lon], popup=f"Logement : {selected_logement}", icon=folium.Icon(color="blue")).add_to(m)

    # Trouver les services √† proximit√©
    nearby_services = find_nearby_services(logement_lat, logement_lon, distance_km, bornes_recharge, stationnements)

    # Ajouter les services sur la carte avec des couleurs diff√©rentes
    for service in nearby_services:
        if service["type"] == "Borne de recharge":
            color = "green"
        elif service["type"] == "Stationnement":
            color = "red"

        # Ajouter un marqueur pour chaque service
        folium.Marker(
            [service["lat"], service["lon"]],
            popup=f"{service['type']} - Distance: {service['distance']:.2f} km",
            icon=folium.Icon(color=color)
        ).add_to(m)

    # Afficher la carte
    folium_static(m)

# Ex√©cution de l'application
if __name__ == "__main__":
    main()